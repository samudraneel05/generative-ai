{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1111676,"sourceType":"datasetVersion","datasetId":623289}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-05T04:46:21.913585Z","iopub.execute_input":"2024-08-05T04:46:21.916182Z","iopub.status.idle":"2024-08-05T04:46:21.926636Z","shell.execute_reply.started":"2024-08-05T04:46:21.915979Z","shell.execute_reply":"2024-08-05T04:46:21.924995Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"**Prerequisites**","metadata":{}},{"cell_type":"code","source":"# Install the transformers library\n!pip install transformers Pillow torch torchvision torchaudio\nfrom transformers import BlipProcessor, BlipForConditionalGeneration\nfrom PIL import Image","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Generating captions**","metadata":{}},{"cell_type":"markdown","source":"Say we use this image present in the Flickr 8k Dataset","metadata":{}},{"cell_type":"code","source":"# Initialize the processor and model from Hugging Face\nprocessor = BlipProcessor.from_pretrained(\"Salesforce/blip-image-captioning-base\")\nmodel = BlipForConditionalGeneration.from_pretrained(\"Salesforce/blip-image-captioning-base\")\n# Load an image\nfile_path = \"/kaggle/input/flickr8k/Images/1000268201_693b08cb0e.jpg\"\nimage = Image.open(file_path)\n# Prepare the image\ninputs = processor(image, return_tensors=\"pt\")\n# Generate captions\noutputs = model.generate(**inputs)\ncaption = processor.decode(outputs[0],skip_special_tokens=True)\n \nprint(\"Generated Caption:\", caption)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:48:02.325603Z","iopub.execute_input":"2024-08-05T04:48:02.326313Z","iopub.status.idle":"2024-08-05T04:48:06.394877Z","shell.execute_reply.started":"2024-08-05T04:48:02.326250Z","shell.execute_reply":"2024-08-05T04:48:06.392480Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Generated Caption: a little girl in a pink dress\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Answering Questions","metadata":{}},{"cell_type":"code","source":"import requests\nfrom PIL import Image\nfrom transformers import BlipProcessor, BlipForConditionalGeneration\nprocessor = BlipProcessor.from_pretrained(\"Salesforce/blip-image-captioning-large\")\nmodel = BlipForConditionalGeneration.from_pretrained(\"Salesforce/blip-image-captioning-large\")\nfile_path = '/kaggle/input/flickr8k/Images/1000268201_693b08cb0e.jpg' \nraw_image = Image.open(file_path).convert('RGB')\n# conditional image captioning\ntext = \"a photograph of\"\ninputs = processor(raw_image, text, return_tensors=\"pt\")\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))\n# unconditional image captioning\ninputs = processor(raw_image, return_tensors=\"pt\")\nout = model.generate(**inputs)\nprint(processor.decode(out[0], skip_special_tokens=True))","metadata":{"execution":{"iopub.status.busy":"2024-08-05T04:45:42.289009Z","iopub.execute_input":"2024-08-05T04:45:42.289954Z","iopub.status.idle":"2024-08-05T04:45:59.666151Z","shell.execute_reply.started":"2024-08-05T04:45:42.289888Z","shell.execute_reply":"2024-08-05T04:45:59.664753Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"a photograph of a little girl standing on a porch next to a chicken coop\nthere is a little girl standing on the steps of a house\n","output_type":"stream"}]}]}